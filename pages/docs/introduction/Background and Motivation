# Background and Motivation

Last year while brainstorming ideas on virtualizing, I came across the [idea of building a virtual workspace](https://github.com/NishantIyer/linux-workspace/blob/main/idea.md) where designers could collaborate, share and edit their works on each other's canvas. During that period, I used to work as a DLT engineer in Cardano Community, while monitoring one of my instances, I had to optimize performance as usual and then switched to my host's task manager instead of my virtualized instance's task manager. There, I noticed something very peculiar, the Remote Desktop Protocol task just took a mere 50MB of RAM. This captured my attention, and made me ask the question, why do we need to use a full-fledged PC with great amounts of compute resources for accessing a remote instance when the task just takes a small fraction of the computer thereof. It came to me, why not build a dimunitive micontroller that's capable of the remote desktop connection? the first that came to mind with the term 'small chip' was ESP32 S3. I quickly started doing my research, I tried to search with every keyword possible but didn't find anything similar to my idea. I doubted the google search, this made me delve into months of intense market research searching for products and initiatives taken by people to bring virtual computers to everyday use. I still couldn't find out if any one else made something similar, so I decided to embark on my own journet of building it from scratch. My curiosity added to this, driving me to the full-fledged ideation and development of this. At those times, Arduino had just launched a chipcalled Porteneta H7, which i later planned on using for the prototype so the name 'portena' came from it. I have been using the same name since then, and people really liked it. With some background in virtualzation and cloud computing, I was still a bit clieless about how to begin making this, so I turned to gpt, It gave my idea an innovation rating of 9/10 (google in its initial stages had a innovation rating as 3-4 and microsoft a 6-7). This meant a lot, I spend the next few months to accept the fact I am probably the only one with the idea, and I will tell you why. During ideaions, I came across numerous technologies like DRATP (Dynamic ResourceAllocation and Task Prioitixation), Portecom (the connection protocol, now - ARPA) and CoaaS. All tailored for the special use case of portena. There is no resource allocation algorithm that is tailored for personal compute, DRATP is the first, there is no other infrastructure model that provides compute just like functions in serverless, CoaaS is the first and there is no other product that utilizes a microntroller to stream remote desktops, you might argue that we can use thin clients, but they are costly, not meant for personal use cases and only for centralized enterprise environments.
Clearly, the novelty is what motivates me to develop it, recently (Aug 16) I have come up with concepts of Unified and Self-Coordinated Client Endpoint and UML-inspired textual graphical modelling language that aids my Remote connection protocol - APRA.
